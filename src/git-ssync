#!/bin/bash

<<COMMENT

notes.
show to replace vars:
use something like:
path="ssync.tools.ncftp.default.params."
exports=$(git config --list | grep "$path" | sed "s/^$path//g" | tr "\n" ";")

cheer='hello $user how are you'
echo $(sh -c "$exports echo $cheer")

another way:
path="ssync.tools.ncftp.default.params."
eval $(git config --list | grep "$path" | sed "s/^$path//g" | tr "\n" ";")

cheer='hello $user how are you'
eval echo $cheer




for git log:
git log $current

#echo "${*:1:1}"
#IFS=', ' read -a args <<< "$@"
#echo ${args[0]}
#echo ${args[1]}
#echo ${args[2]}

COMMENT

trap "exit 1" TERM
export TOP_PID=$$

function init()
{
   # base repository directory
   ROOT=$(git rev-parse --show-toplevel)

   # extract current branch name
   BRANCH=$(git name-rev HEAD 2> /dev/null | awk "{ print \$2 }")

   # get a version string, so archives will not be overwritten when creating
   # many of them
   VERSION=$(git describe --always --long)

   # get the current working tool
   TOOL=$(git config ssync.current.tool)

   # get the current working scope
   SCOPE=$(git config ssync.current.scope)

}

#error echo
echoerr() { echo "$@" 1>&2; }

function show_help()
{
   vrb=$1
   if [ "$vrb" = "help" ]; then
   cat << HELP
ssync 
usage: git ssync <command>

commands:

   init        initialzes the remote repository
   log         shows the logs of the latest uploaded commit on the server
   push        push the current local branch HEAD into the remote environment
   catchup     sets the remote HEAD to the current local branch HEAD


   #configure params for all tools
   git config ssync.tools.default.scopes.default.params.[paramname] [paramvalue]

   #configure params for tool
   git config ssync.tools.[tool].scopes.default.params.[paramname] [paramvalue]

   #configure tool retrieve last commit 
   git config ssync.tools.[tool].getcommit '[shell script]'

   #configure tool to set last commit
   git ocnfig ssync.tools.[tool].setcommit '[shell script]'

   #configure tool to upload all files in current directory
   git config ssync.tools.[tool].push '[shell script]'

   #configure params for tool and scope (this will override the tool params)
   git config ssync.tools.[tool].scopes.[scope].params.[paramname]

   #set current tool:
   git config ssync.current.tool [tool]

   #set current scope
   git config ssync.current.scope [scope]

   #set current scope branch (you will only be able to push from this branch)
   git config ssync.current.branch [branchname]

   #view remote log
   git ssync log

   #push commits
   git ssync push

   #set remote head
   git ssync catchup [partial commit id]

HELP
   end_process

   fi

if [ "$vrb" = "example" ]; then
   cat << HELP
   #example with ncftp as tool and default as scope

   #create a directory repository
   mkdir testssync
   cd testssync
   git init
   date +%N > myfile
   git add myfile
   git commit -m "initial commit"
   date +%N > myfile
   git add myfile
   git commit -m "initial commit"
   date +%N > myfile
   git add myfile
   git commit -m "initial commit"
   date +%N > myfile
   git add myfile
   git commit -m "initial commit"

   #configure params for tool
   git config ssync.tools.ncftp.scopes.default.params.lastcommitfile "last_commit"

   #configure tool to retrieve last commit
   git config ssync.tools.ncftp.getcommit 'ncftpget -u\$user -p\$password \$domain . \$path\$lastcommitfile; cat \$lastcommitfile'

   #configure tool to set last commit
   git config ssync.tools.ncftp.setcommit 'echo % > \$lastcommitfile;ncftpput -u\$user -p\$password \$domain \$path \$lastcommitfile'

   #configure tool to upload everything in the current directory
   git config ssync.tools.ncftp.push 'ncftpput -R -u\$user -p\$password \$domain \$path \*'

   #configure params for dummy tool
   git config ssync.tools.dummy.scopes.default.params.some "some value"

   #configure scope default
   git config ssync.tools.ncftp.scopes.default.params.user mauricio
   git config ssync.tools.ncftp.scopes.default.params.password asdtyu
   git config ssync.tools.ncftp.scopes.default.params.domain localhost
   git config ssync.tools.ncftp.scopes.default.params.path /www/testproj/
HELP
   end_process

   fi
}

function blue()
{
   echo $'\033[34m'$*$'.\033[0m\n'
}

function green()
{
   echo $'\033[32m'$*$'.\033[0m\n'
}

function red()
{
   echo $'\033[31m'$*$'.\033[0m\n'
}

function cyan()
{
   echo $'\033[36m'$*$'.\033[0m\n'
}



function get_tools()
{
   pushd $ROOT > /dev/null
   git config --list | grep ssync\.tools | sed "s/^ssync\\.tools\\.//g" | sed "s#\\..\+##g" | sort | uniq
   popd > /dev/null
}

function end_process()
{
   kill -s TERM $TOP_PID
}

function tool_exists()
{
   tools=$(get_tools)
   for tool in $tools
   do
      if [ "$tool" = "$1" ]; then
         echo $1; break
      fi
   done
}

function list_tool_scopes()
{
   tool=$1
   tools=$(get_tools)
   pushd $ROOT > /dev/null
   git config --list | grep ssync\.tools\.$tool\.scopes\. | sed "s/^ssync\\.tools\\.$tool\\.scopes\\.//g" | sed "s#\\..\+##g" | sort | uniq
   popd > /dev/null
}

function scope_exists()
{
   tool=$1
   scope=$2
   scopes=$(list_tool_scopes $tool)

   for temp in $scopes
   do
      if [ "$scope" = "$temp" ]; then
         echo $scope; break
      fi
   done
}

function validate_tool()
{
   #CHECK THAT THE CURRENT SELECTED TOOL IS VALID
   if [ "$TOOL" = "" ]; then
      tools=$(get_tools)
      if [ "$tools" = "" ]; then
         echo "you dont have any ssync tools, you can configure one, example:

       #configure params for dummy tool
       git config ssync.tools.dummy.params.some \"some value\"

       #configure tool to retrieve last commit
       git config ssync.tools.dummy.getcommit 'dummy -p\$some --get-last-commit'
       
       #configure tool to set last commit
       git config ssync.tools.dummy.setcommit 'dummy -p\$some --set-last-commit=%'

       #configure tool to upload everything in the current directory
       git config ssync.tools.dummy.push 'dummy -p\$some --upload-current-dir-content'

   "
         end_process
      fi
      echo "you have to select a tool, use:
      git config ssync.current.tool [toolname]
   available tools for this repo:"   

      echo $tools
      end_process
   fi

   temp=$(tool_exists $TOOL)
   if [ "$temp" = "" ]; then
      eval git config --unset ssync.current.tool 
      echo "the tool ssync $TOOL does not exists"
      echo $tools
      end_process
   fi
}


function validate_scope()
{
   if [ "$SCOPE" = "" ]; then
      echo "You dont have any scope selected, using the default scope"
      SCOPE="default"
   fi
   
   temp=$(scope_exists $TOOL $SCOPE)
   if [ "$temp" = "" ]; then
      echo "the scope $SCOPE does not exists for the tool $TOOL"
      end_process
   fi
}

function expand_commitid()
{
   local commit=$(git merge-base $1 $BRANCH  2>/dev/null)
   local status=$?
   if [ $status -ne 0 ]; then
      return 1
   fi
   echo $commit
}

function get_tool_config()
{
   retval=""
   pushd $ROOT > /dev/null
   retval=$(git config ssync.tools.$TOOL.$1)
   popd  > /dev/null
   echo $retval
}

function get_req_tool_config()
{
   retval=$(get_tool_config $1)
   if [ "$retval" = "" ]; then
      echoerr "The tool configuration \"$1\" is required"
      echoerr "Please define it using:"
      echoerr "   git config ssync.tools.$TOOL.$1 \"some value\""
      end_process
   fi
   echo $retval
}

function extract_params
{
   local _path=$1
   local _dir=$2

   pushd $ROOT > /dev/null
   config=$(git config --list | grep "$_path" | sed "s/^$_path//g" | tr "\n" ";")
   popd > /dev/null
   if [ "$_dir" = "" ]; then
      eval $config
   else
      pushd $_dir > /dev/null
      eval $config
      popd > /dev/null
   fi
}

function extract_tool_scope_params()
{
   local _dir=$1
   #extracting first the default params
   extract_params "ssync.tools.$TOOL.scopes.default.params." $_dir

   #afteward the scoped params
   extract_params "ssync.tools.$TOOL.scopes.$SCOPE.params." $_dir
}

#returns the remote commit id into the provided varname
function remotehead()
{
   local __resultvar=$1
   local __rcommit
   local __dieifwrong=$2 # 1 by default

   extract_tool_scope_params
   getcommit=$(get_req_tool_config getcommit)
   repo=$(pwd)
   dir=`mktemp -d` && cd $dir
   echo $(blue "obtaining pushed last commit")

   echo -e "\033[33;1m"
   __rcommit=$(eval $getcommit)
   echo -e "\033[0m"

   rm -Rf $dir
   cd $repo

   if [ "$__dieifwrong" = "" ] || [ "$__dieifwrong" = "1" ]; then
      if [ "$__rcommit" = "" ]; then
         echo $(red "Seems like the remote repository is not initialized")
         echo "you can initialize by using: "
         echo $'\tgit ssync init'
         echo $'\t(it will upload all the content of the repository)\n'
         echo "or you can use git catchup: "
         echo $'\tgit ssync catchup [commit_id]';
         echo $'\t(it will mark the remote HEAD repository to the provided commit_id, or to HEAD if no commit id is provided)'
         end_process
      fi
   fi


   eval $__resultvar=$__rcommit
}

#checks if a commit is valid and returns echoed if it's
function commitid_orhead()
{
   local commit
   if [ "$1" = "" ]; then
      commit=$(expand_commitid HEAD)
   else
      commit=$(expand_commitid $1)
      if [ "$commit" = "" ]; then
         return
      fi
   fi
   echo $commit
}

#marks the remote head to the provided commit id
function catchup()
{
   local commit=$1
   
   echo $(blue "setting remote head to $commit")
   setcommit=$(get_req_tool_config setcommit)
   extract_tool_scope_params
   dir=`mktemp -d` && pushd $dir > /dev/null
   setcommit=${setcommit/\%/$commit}

   echo -e "\033[33;1m"
   eval $setcommit
   echo -e "\033[0m"
   popd
   rm -Rf $dir
}

#push files into the remote repository
function push()
{
   local from=$1
   local to=$2
   echo $(blue "pushing to remote environment $1 -> $2")

   #compress the file, ensure we are on the root of the repo
   echo $(blue "compressing files")
   pushd $ROOT > /dev/null
   tgz=`mktemp`

   tar -cf $tgz $(git diff $from..$to --name-only)
   popd > /dev/null

   #create temp, go there, extract and remove compressed file
   dir=`mktemp -d` && pushd $dir > /dev/null
   tar -xf $tgz
   rm $tgz
   #asterisk=$(echo *)

   #now we valuate the configs in the given directory
   push=$(get_req_tool_config push)
   #push=${push/\\\*/\$asterisk}
   extract_tool_scope_params $dir

   #let them handle the upload
   echo -e "\033[33;1m"
   eval $push
   echo -e "\033[0m"
   popd > /dev/null
   rm -Rf $dir
}

#process the user request to get the remote log
function process_log()
{
   if [ "$1" = "log" ]; then
      echo $(cyan "retrieving remote log")
      remotehead rcommit

      commit=$(expand_commitid $rcommit)

      if [ "$commit" = "" ]; then
         echo $(red "The remote repository is set to the INVALID (or ahead local repository) commit id: $rcommit")
      else
         git log $commit
      fi
      end_process
   fi
}

#process the user request to catchup
function process_catchup()
{
   if [ "$1" = "catchup" ]; then
      commit=$(commitid_orhead $2)
      if [ "$commit" = "" ]; then
         echo $(red "the commit id \"$2\" is not valid")
         end_process
      fi

      echo $(cyan "catching up to $commit")
      catchup $commit

      end_process
   fi
}

#process the user request to push
function process_push()
{
   if [ "$1" = "push" ]; then
      commit=$(commitid_orhead $2)
      if [ "$commit" = "" ]; then
         echo $(red "the commit id \"$2\" is not valid")
         end_process
      fi

      echo $(cyan "pushing commit $commit")
      remotehead rrcommit
      
      if [ "$rrcommit" = "$commit" ]; then
         echo $(green "remote repository is up to date")
         end_process
      else
         rcommit=$(expand_commitid $rrcommit)
         if [ "$rcommit" = "" ]; then
            echo $(red "The remote repository is set to the INVALID (or ahead local repository) commit id: $rrcommit")
         else
            oldest=$(git merge-base $commit $rcommit)
            
            if [ "$oldest" = "$rcommit" ]; then
               push $rcommit $commit
               catchup $commit
               git diff $rcommit..$commit --stat
               echo $(green "remote environment updated to $commit")
            else
               echo $(red "Cannot push. The remote environment is ahead. $rcommit");
            fi
         fi
      fi
   fi
}

function process_status()
{
   if [ "$1" = "status" ]; then
      commit=$(commitid_orhead)
      echo $(cyan "obtaining repository status")
      remotehead rrcommit

      if [ "$rrcommit" = "$commit" ]; then
         echo $(green "remote repository is up to date")
         end_process
      else
         rcommit=$(expand_commitid $rrcommit)
         if [ "$rcommit" = "" ]; then
            echo $(red "The remote repository is set to the INVALID (or ahead local repository) commit id: $rrcommit")
         else
            acommits=$(git rev-list HEAD --count)
            arcommits=$(git rev-list $rcommit --count)
            aheadby=$(expr $acommits - $arcommits)
            git diff $rcommit..HEAD --stat
            echo $(green "the remote repository is behind by $aheadby commits. $rcommit")
         fi
      fi      

      echo $commit
   fi   
}

function process_configure()
{
   if [ "$1" = "configure" ]; then
      if [ "$2" = "ncftp" ]; then

         echo $(cyan "configuring ncftp")
         echo $(blue "adding global ssync tool ncftp")
         #configure params for tool
         git config --global ssync.tools.ncftp.scopes.default.params.lastcommitfile "last_commit"

         #configure tool to retrieve last commit
         git config --global ssync.tools.ncftp.getcommit 'ncftpget -u$user -p$password $domain . $path$lastcommitfile; cat $lastcommitfile'

         #configure tool to set last commit
         git config --global ssync.tools.ncftp.setcommit 'echo % > $lastcommitfile;ncftpput -u$user -p$password $domain $path $lastcommitfile'

         #configure tool to upload everything in the current directory
         git config --global ssync.tools.ncftp.push 'ncftpput -R -u$user -p$password $domain $path *'

         local _domain=$3
         local _user=$4
         local _password=$5
         local _path=$6
         echo $(blue "setting repository ncftp config to:")
         echo "domain: $_domain"
         echo "user: $_user"
         echo "password: $_password"
         echo "path: $_path"

         #configure scope default
         git config ssync.tools.ncftp.scopes.default.params.user $_user
         git config ssync.tools.ncftp.scopes.default.params.password $_password
         git config ssync.tools.ncftp.scopes.default.params.domain $_domain
         git config ssync.tools.ncftp.scopes.default.params.path $_path
         end_process
      fi
   fi
}

show_help $@
init
process_configure "${@:1}"
validate_tool
validate_scope

echo "TOOL $TOOL, SCOPE: $SCOPE"

process_status "${@:1}"
process_log "${@:1}"
process_catchup "${@:1}"
process_push "${@:1}"


